// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.2
// source: bee_management.proto

package bee_management

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 1. GetTotalHoneyHarvested
type GetTotalHoneyHarvestedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HiveId    int32  `protobuf:"varint,1,opt,name=hive_id,json=hiveId,proto3" json:"hive_id,omitempty"`
	StartDate string `protobuf:"bytes,2,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"` // Format: YYYY-MM-DD
	EndDate   string `protobuf:"bytes,3,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`       // Format: YYYY-MM-DD
}

func (x *GetTotalHoneyHarvestedRequest) Reset() {
	*x = GetTotalHoneyHarvestedRequest{}
	mi := &file_bee_management_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTotalHoneyHarvestedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTotalHoneyHarvestedRequest) ProtoMessage() {}

func (x *GetTotalHoneyHarvestedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bee_management_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTotalHoneyHarvestedRequest.ProtoReflect.Descriptor instead.
func (*GetTotalHoneyHarvestedRequest) Descriptor() ([]byte, []int) {
	return file_bee_management_proto_rawDescGZIP(), []int{0}
}

func (x *GetTotalHoneyHarvestedRequest) GetHiveId() int32 {
	if x != nil {
		return x.HiveId
	}
	return 0
}

func (x *GetTotalHoneyHarvestedRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *GetTotalHoneyHarvestedRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

type GetTotalHoneyHarvestedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalHoney float64 `protobuf:"fixed64,1,opt,name=total_honey,json=totalHoney,proto3" json:"total_honey,omitempty"`
}

func (x *GetTotalHoneyHarvestedResponse) Reset() {
	*x = GetTotalHoneyHarvestedResponse{}
	mi := &file_bee_management_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTotalHoneyHarvestedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTotalHoneyHarvestedResponse) ProtoMessage() {}

func (x *GetTotalHoneyHarvestedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bee_management_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTotalHoneyHarvestedResponse.ProtoReflect.Descriptor instead.
func (*GetTotalHoneyHarvestedResponse) Descriptor() ([]byte, []int) {
	return file_bee_management_proto_rawDescGZIP(), []int{1}
}

func (x *GetTotalHoneyHarvestedResponse) GetTotalHoney() float64 {
	if x != nil {
		return x.TotalHoney
	}
	return 0
}

// 2. AddObservation
type AddObservationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HiveId          int32  `protobuf:"varint,1,opt,name=hive_id,json=hiveId,proto3" json:"hive_id,omitempty"`
	ObservationDate string `protobuf:"bytes,2,opt,name=observation_date,json=observationDate,proto3" json:"observation_date,omitempty"` // Format: YYYY-MM-DD
	Description     string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Recommendations string `protobuf:"bytes,4,opt,name=recommendations,proto3" json:"recommendations,omitempty"`
}

func (x *AddObservationRequest) Reset() {
	*x = AddObservationRequest{}
	mi := &file_bee_management_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddObservationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddObservationRequest) ProtoMessage() {}

func (x *AddObservationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bee_management_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddObservationRequest.ProtoReflect.Descriptor instead.
func (*AddObservationRequest) Descriptor() ([]byte, []int) {
	return file_bee_management_proto_rawDescGZIP(), []int{2}
}

func (x *AddObservationRequest) GetHiveId() int32 {
	if x != nil {
		return x.HiveId
	}
	return 0
}

func (x *AddObservationRequest) GetObservationDate() string {
	if x != nil {
		return x.ObservationDate
	}
	return ""
}

func (x *AddObservationRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AddObservationRequest) GetRecommendations() string {
	if x != nil {
		return x.Recommendations
	}
	return ""
}

// 3. GetCommunityHealthStatus
type GetCommunityHealthStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommunityId int32 `protobuf:"varint,1,opt,name=community_id,json=communityId,proto3" json:"community_id,omitempty"`
}

func (x *GetCommunityHealthStatusRequest) Reset() {
	*x = GetCommunityHealthStatusRequest{}
	mi := &file_bee_management_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCommunityHealthStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommunityHealthStatusRequest) ProtoMessage() {}

func (x *GetCommunityHealthStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bee_management_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommunityHealthStatusRequest.ProtoReflect.Descriptor instead.
func (*GetCommunityHealthStatusRequest) Descriptor() ([]byte, []int) {
	return file_bee_management_proto_rawDescGZIP(), []int{3}
}

func (x *GetCommunityHealthStatusRequest) GetCommunityId() int32 {
	if x != nil {
		return x.CommunityId
	}
	return 0
}

type GetCommunityHealthStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HealthStatus string `protobuf:"bytes,1,opt,name=health_status,json=healthStatus,proto3" json:"health_status,omitempty"`
}

func (x *GetCommunityHealthStatusResponse) Reset() {
	*x = GetCommunityHealthStatusResponse{}
	mi := &file_bee_management_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCommunityHealthStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommunityHealthStatusResponse) ProtoMessage() {}

func (x *GetCommunityHealthStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bee_management_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommunityHealthStatusResponse.ProtoReflect.Descriptor instead.
func (*GetCommunityHealthStatusResponse) Descriptor() ([]byte, []int) {
	return file_bee_management_proto_rawDescGZIP(), []int{4}
}

func (x *GetCommunityHealthStatusResponse) GetHealthStatus() string {
	if x != nil {
		return x.HealthStatus
	}
	return ""
}

// 4. UpdateHiveStatus
type UpdateHiveStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HiveId    int32  `protobuf:"varint,1,opt,name=hive_id,json=hiveId,proto3" json:"hive_id,omitempty"`
	NewStatus string `protobuf:"bytes,2,opt,name=new_status,json=newStatus,proto3" json:"new_status,omitempty"`
}

func (x *UpdateHiveStatusRequest) Reset() {
	*x = UpdateHiveStatusRequest{}
	mi := &file_bee_management_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateHiveStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHiveStatusRequest) ProtoMessage() {}

func (x *UpdateHiveStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bee_management_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHiveStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateHiveStatusRequest) Descriptor() ([]byte, []int) {
	return file_bee_management_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateHiveStatusRequest) GetHiveId() int32 {
	if x != nil {
		return x.HiveId
	}
	return 0
}

func (x *UpdateHiveStatusRequest) GetNewStatus() string {
	if x != nil {
		return x.NewStatus
	}
	return ""
}

// 5. GetAvgTemperature
type GetAvgTemperatureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId int32 `protobuf:"varint,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	Days     int32 `protobuf:"varint,2,opt,name=days,proto3" json:"days,omitempty"`
}

func (x *GetAvgTemperatureRequest) Reset() {
	*x = GetAvgTemperatureRequest{}
	mi := &file_bee_management_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAvgTemperatureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvgTemperatureRequest) ProtoMessage() {}

func (x *GetAvgTemperatureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bee_management_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvgTemperatureRequest.ProtoReflect.Descriptor instead.
func (*GetAvgTemperatureRequest) Descriptor() ([]byte, []int) {
	return file_bee_management_proto_rawDescGZIP(), []int{6}
}

func (x *GetAvgTemperatureRequest) GetRegionId() int32 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

func (x *GetAvgTemperatureRequest) GetDays() int32 {
	if x != nil {
		return x.Days
	}
	return 0
}

type GetAvgTemperatureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvgTemperature float64 `protobuf:"fixed64,1,opt,name=avg_temperature,json=avgTemperature,proto3" json:"avg_temperature,omitempty"`
}

func (x *GetAvgTemperatureResponse) Reset() {
	*x = GetAvgTemperatureResponse{}
	mi := &file_bee_management_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAvgTemperatureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvgTemperatureResponse) ProtoMessage() {}

func (x *GetAvgTemperatureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bee_management_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvgTemperatureResponse.ProtoReflect.Descriptor instead.
func (*GetAvgTemperatureResponse) Descriptor() ([]byte, []int) {
	return file_bee_management_proto_rawDescGZIP(), []int{7}
}

func (x *GetAvgTemperatureResponse) GetAvgTemperature() float64 {
	if x != nil {
		return x.AvgTemperature
	}
	return 0
}

// 6. AssignMaintenancePlan
type AssignMaintenancePlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlanId int32 `protobuf:"varint,1,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	UserId int32 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *AssignMaintenancePlanRequest) Reset() {
	*x = AssignMaintenancePlanRequest{}
	mi := &file_bee_management_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignMaintenancePlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignMaintenancePlanRequest) ProtoMessage() {}

func (x *AssignMaintenancePlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bee_management_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignMaintenancePlanRequest.ProtoReflect.Descriptor instead.
func (*AssignMaintenancePlanRequest) Descriptor() ([]byte, []int) {
	return file_bee_management_proto_rawDescGZIP(), []int{8}
}

func (x *AssignMaintenancePlanRequest) GetPlanId() int32 {
	if x != nil {
		return x.PlanId
	}
	return 0
}

func (x *AssignMaintenancePlanRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 7. HasRegionAccess
type HasRegionAccessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	RegionId int32 `protobuf:"varint,2,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
}

func (x *HasRegionAccessRequest) Reset() {
	*x = HasRegionAccessRequest{}
	mi := &file_bee_management_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HasRegionAccessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HasRegionAccessRequest) ProtoMessage() {}

func (x *HasRegionAccessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bee_management_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HasRegionAccessRequest.ProtoReflect.Descriptor instead.
func (*HasRegionAccessRequest) Descriptor() ([]byte, []int) {
	return file_bee_management_proto_rawDescGZIP(), []int{9}
}

func (x *HasRegionAccessRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *HasRegionAccessRequest) GetRegionId() int32 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

type HasRegionAccessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasAccess bool `protobuf:"varint,1,opt,name=has_access,json=hasAccess,proto3" json:"has_access,omitempty"`
}

func (x *HasRegionAccessResponse) Reset() {
	*x = HasRegionAccessResponse{}
	mi := &file_bee_management_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HasRegionAccessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HasRegionAccessResponse) ProtoMessage() {}

func (x *HasRegionAccessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bee_management_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HasRegionAccessResponse.ProtoReflect.Descriptor instead.
func (*HasRegionAccessResponse) Descriptor() ([]byte, []int) {
	return file_bee_management_proto_rawDescGZIP(), []int{10}
}

func (x *HasRegionAccessResponse) GetHasAccess() bool {
	if x != nil {
		return x.HasAccess
	}
	return false
}

// 8. RegisterIncident
type RegisterIncidentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HiveId       int32  `protobuf:"varint,1,opt,name=hive_id,json=hiveId,proto3" json:"hive_id,omitempty"`
	IncidentDate string `protobuf:"bytes,2,opt,name=incident_date,json=incidentDate,proto3" json:"incident_date,omitempty"` // Format: YYYY-MM-DD
	Description  string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Severity     string `protobuf:"bytes,4,opt,name=severity,proto3" json:"severity,omitempty"`
}

func (x *RegisterIncidentRequest) Reset() {
	*x = RegisterIncidentRequest{}
	mi := &file_bee_management_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterIncidentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterIncidentRequest) ProtoMessage() {}

func (x *RegisterIncidentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bee_management_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterIncidentRequest.ProtoReflect.Descriptor instead.
func (*RegisterIncidentRequest) Descriptor() ([]byte, []int) {
	return file_bee_management_proto_rawDescGZIP(), []int{11}
}

func (x *RegisterIncidentRequest) GetHiveId() int32 {
	if x != nil {
		return x.HiveId
	}
	return 0
}

func (x *RegisterIncidentRequest) GetIncidentDate() string {
	if x != nil {
		return x.IncidentDate
	}
	return ""
}

func (x *RegisterIncidentRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RegisterIncidentRequest) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

// 9. GetLatestSensorReading
type GetLatestSensorReadingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HiveId     int32  `protobuf:"varint,1,opt,name=hive_id,json=hiveId,proto3" json:"hive_id,omitempty"`
	SensorType string `protobuf:"bytes,2,opt,name=sensor_type,json=sensorType,proto3" json:"sensor_type,omitempty"`
}

func (x *GetLatestSensorReadingRequest) Reset() {
	*x = GetLatestSensorReadingRequest{}
	mi := &file_bee_management_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLatestSensorReadingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestSensorReadingRequest) ProtoMessage() {}

func (x *GetLatestSensorReadingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bee_management_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestSensorReadingRequest.ProtoReflect.Descriptor instead.
func (*GetLatestSensorReadingRequest) Descriptor() ([]byte, []int) {
	return file_bee_management_proto_rawDescGZIP(), []int{12}
}

func (x *GetLatestSensorReadingRequest) GetHiveId() int32 {
	if x != nil {
		return x.HiveId
	}
	return 0
}

func (x *GetLatestSensorReadingRequest) GetSensorType() string {
	if x != nil {
		return x.SensorType
	}
	return ""
}

type GetLatestSensorReadingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Timestamp string `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // ISO 8601 format
}

func (x *GetLatestSensorReadingResponse) Reset() {
	*x = GetLatestSensorReadingResponse{}
	mi := &file_bee_management_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLatestSensorReadingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestSensorReadingResponse) ProtoMessage() {}

func (x *GetLatestSensorReadingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bee_management_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestSensorReadingResponse.ProtoReflect.Descriptor instead.
func (*GetLatestSensorReadingResponse) Descriptor() ([]byte, []int) {
	return file_bee_management_proto_rawDescGZIP(), []int{13}
}

func (x *GetLatestSensorReadingResponse) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *GetLatestSensorReadingResponse) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

// 10. CreateProductionReport
type CreateProductionReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiaryId  int32  `protobuf:"varint,1,opt,name=apiary_id,json=apiaryId,proto3" json:"apiary_id,omitempty"`
	StartDate string `protobuf:"bytes,2,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"` // Format: YYYY-MM-DD
	EndDate   string `protobuf:"bytes,3,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`       // Format: YYYY-MM-DD
}

func (x *CreateProductionReportRequest) Reset() {
	*x = CreateProductionReportRequest{}
	mi := &file_bee_management_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateProductionReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProductionReportRequest) ProtoMessage() {}

func (x *CreateProductionReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bee_management_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProductionReportRequest.ProtoReflect.Descriptor instead.
func (*CreateProductionReportRequest) Descriptor() ([]byte, []int) {
	return file_bee_management_proto_rawDescGZIP(), []int{14}
}

func (x *CreateProductionReportRequest) GetApiaryId() int32 {
	if x != nil {
		return x.ApiaryId
	}
	return 0
}

func (x *CreateProductionReportRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *CreateProductionReportRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

var File_bee_management_proto protoreflect.FileDescriptor

var file_bee_management_proto_rawDesc = []byte{
	0x0a, 0x14, 0x62, 0x65, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x62, 0x65, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x72, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x48,
	0x6f, 0x6e, 0x65, 0x79, 0x48, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x69, 0x76, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0x41, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x48, 0x6f, 0x6e, 0x65, 0x79, 0x48, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x68, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x6f, 0x6e, 0x65, 0x79, 0x22, 0xa7, 0x01, 0x0a, 0x15, 0x41,
	0x64, 0x64, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x69, 0x76, 0x65, 0x49, 0x64, 0x12, 0x29, 0x0a,
	0x10, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x44, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x20, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x51, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x69, 0x76,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x68, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x68, 0x69, 0x76, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x77,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4b, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x76, 0x67,
	0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64,
	0x61, 0x79, 0x73, 0x22, 0x44, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x76, 0x67, 0x54, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x61, 0x76, 0x67, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x61, 0x76, 0x67, 0x54, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x50, 0x0a, 0x1c, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x61,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x4e, 0x0a, 0x16, 0x48,
	0x61, 0x73, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x38, 0x0a, 0x17, 0x48,
	0x61, 0x73, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x61, 0x73, 0x5f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x68, 0x61, 0x73, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x68, 0x69, 0x76, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e,
	0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x22, 0x59, 0x0a,
	0x1d, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x68, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x68, 0x69, 0x76, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x54, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x4c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x76,
	0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x61, 0x70, 0x69, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x61, 0x70, 0x69, 0x61, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x32, 0xa4, 0x08, 0x0a, 0x14, 0x42, 0x65, 0x65, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x79, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x6f, 0x6e, 0x65, 0x79,
	0x48, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x2d, 0x2e, 0x62, 0x65, 0x65, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x48, 0x6f, 0x6e, 0x65, 0x79, 0x48, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x62, 0x65, 0x65, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x48, 0x6f, 0x6e, 0x65, 0x79, 0x48, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0e, 0x41, 0x64,
	0x64, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x62,
	0x65, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64,
	0x64, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x7f, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x2e, 0x62, 0x65, 0x65, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x62, 0x65, 0x65,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55,
	0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x27, 0x2e, 0x62, 0x65, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x69, 0x76, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x76, 0x67, 0x54,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x28, 0x2e, 0x62, 0x65, 0x65,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x76, 0x67, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x62, 0x65, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x76, 0x67, 0x54, 0x65, 0x6d, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x5f, 0x0a, 0x15, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x4d, 0x61, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x2c, 0x2e, 0x62, 0x65, 0x65,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x6c, 0x61,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x64, 0x0a, 0x0f, 0x48, 0x61, 0x73, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x26, 0x2e, 0x62, 0x65, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x48, 0x61, 0x73, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x62, 0x65, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x48,
	0x61, 0x73, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x2e, 0x62,
	0x65, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x79, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2d, 0x2e, 0x62, 0x65, 0x65, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x62, 0x65, 0x65, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x16, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x2d, 0x2e, 0x62, 0x65, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x31, 0x5a,
	0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x72, 0x69, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x62, 0x65, 0x65, 0x73, 0x62, 0x69,
	0x7a, 0x2f, 0x62, 0x65, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bee_management_proto_rawDescOnce sync.Once
	file_bee_management_proto_rawDescData = file_bee_management_proto_rawDesc
)

func file_bee_management_proto_rawDescGZIP() []byte {
	file_bee_management_proto_rawDescOnce.Do(func() {
		file_bee_management_proto_rawDescData = protoimpl.X.CompressGZIP(file_bee_management_proto_rawDescData)
	})
	return file_bee_management_proto_rawDescData
}

var file_bee_management_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_bee_management_proto_goTypes = []any{
	(*GetTotalHoneyHarvestedRequest)(nil),    // 0: bee_management.GetTotalHoneyHarvestedRequest
	(*GetTotalHoneyHarvestedResponse)(nil),   // 1: bee_management.GetTotalHoneyHarvestedResponse
	(*AddObservationRequest)(nil),            // 2: bee_management.AddObservationRequest
	(*GetCommunityHealthStatusRequest)(nil),  // 3: bee_management.GetCommunityHealthStatusRequest
	(*GetCommunityHealthStatusResponse)(nil), // 4: bee_management.GetCommunityHealthStatusResponse
	(*UpdateHiveStatusRequest)(nil),          // 5: bee_management.UpdateHiveStatusRequest
	(*GetAvgTemperatureRequest)(nil),         // 6: bee_management.GetAvgTemperatureRequest
	(*GetAvgTemperatureResponse)(nil),        // 7: bee_management.GetAvgTemperatureResponse
	(*AssignMaintenancePlanRequest)(nil),     // 8: bee_management.AssignMaintenancePlanRequest
	(*HasRegionAccessRequest)(nil),           // 9: bee_management.HasRegionAccessRequest
	(*HasRegionAccessResponse)(nil),          // 10: bee_management.HasRegionAccessResponse
	(*RegisterIncidentRequest)(nil),          // 11: bee_management.RegisterIncidentRequest
	(*GetLatestSensorReadingRequest)(nil),    // 12: bee_management.GetLatestSensorReadingRequest
	(*GetLatestSensorReadingResponse)(nil),   // 13: bee_management.GetLatestSensorReadingResponse
	(*CreateProductionReportRequest)(nil),    // 14: bee_management.CreateProductionReportRequest
	(*emptypb.Empty)(nil),                    // 15: google.protobuf.Empty
}
var file_bee_management_proto_depIdxs = []int32{
	0,  // 0: bee_management.BeeManagementService.GetTotalHoneyHarvested:input_type -> bee_management.GetTotalHoneyHarvestedRequest
	2,  // 1: bee_management.BeeManagementService.AddObservation:input_type -> bee_management.AddObservationRequest
	3,  // 2: bee_management.BeeManagementService.GetCommunityHealthStatus:input_type -> bee_management.GetCommunityHealthStatusRequest
	5,  // 3: bee_management.BeeManagementService.UpdateHiveStatus:input_type -> bee_management.UpdateHiveStatusRequest
	6,  // 4: bee_management.BeeManagementService.GetAvgTemperature:input_type -> bee_management.GetAvgTemperatureRequest
	8,  // 5: bee_management.BeeManagementService.AssignMaintenancePlan:input_type -> bee_management.AssignMaintenancePlanRequest
	9,  // 6: bee_management.BeeManagementService.HasRegionAccess:input_type -> bee_management.HasRegionAccessRequest
	11, // 7: bee_management.BeeManagementService.RegisterIncident:input_type -> bee_management.RegisterIncidentRequest
	12, // 8: bee_management.BeeManagementService.GetLatestSensorReading:input_type -> bee_management.GetLatestSensorReadingRequest
	14, // 9: bee_management.BeeManagementService.CreateProductionReport:input_type -> bee_management.CreateProductionReportRequest
	1,  // 10: bee_management.BeeManagementService.GetTotalHoneyHarvested:output_type -> bee_management.GetTotalHoneyHarvestedResponse
	15, // 11: bee_management.BeeManagementService.AddObservation:output_type -> google.protobuf.Empty
	4,  // 12: bee_management.BeeManagementService.GetCommunityHealthStatus:output_type -> bee_management.GetCommunityHealthStatusResponse
	15, // 13: bee_management.BeeManagementService.UpdateHiveStatus:output_type -> google.protobuf.Empty
	7,  // 14: bee_management.BeeManagementService.GetAvgTemperature:output_type -> bee_management.GetAvgTemperatureResponse
	15, // 15: bee_management.BeeManagementService.AssignMaintenancePlan:output_type -> google.protobuf.Empty
	10, // 16: bee_management.BeeManagementService.HasRegionAccess:output_type -> bee_management.HasRegionAccessResponse
	15, // 17: bee_management.BeeManagementService.RegisterIncident:output_type -> google.protobuf.Empty
	13, // 18: bee_management.BeeManagementService.GetLatestSensorReading:output_type -> bee_management.GetLatestSensorReadingResponse
	15, // 19: bee_management.BeeManagementService.CreateProductionReport:output_type -> google.protobuf.Empty
	10, // [10:20] is the sub-list for method output_type
	0,  // [0:10] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_bee_management_proto_init() }
func file_bee_management_proto_init() {
	if File_bee_management_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bee_management_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bee_management_proto_goTypes,
		DependencyIndexes: file_bee_management_proto_depIdxs,
		MessageInfos:      file_bee_management_proto_msgTypes,
	}.Build()
	File_bee_management_proto = out.File
	file_bee_management_proto_rawDesc = nil
	file_bee_management_proto_goTypes = nil
	file_bee_management_proto_depIdxs = nil
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: bee_management.proto

package bee_management

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BeeManagementService_GetTotalHoneyHarvested_FullMethodName   = "/bee_management.BeeManagementService/GetTotalHoneyHarvested"
	BeeManagementService_AddObservation_FullMethodName           = "/bee_management.BeeManagementService/AddObservation"
	BeeManagementService_GetCommunityHealthStatus_FullMethodName = "/bee_management.BeeManagementService/GetCommunityHealthStatus"
	BeeManagementService_UpdateHiveStatus_FullMethodName         = "/bee_management.BeeManagementService/UpdateHiveStatus"
	BeeManagementService_GetAvgTemperature_FullMethodName        = "/bee_management.BeeManagementService/GetAvgTemperature"
	BeeManagementService_AssignMaintenancePlan_FullMethodName    = "/bee_management.BeeManagementService/AssignMaintenancePlan"
	BeeManagementService_HasRegionAccess_FullMethodName          = "/bee_management.BeeManagementService/HasRegionAccess"
	BeeManagementService_RegisterIncident_FullMethodName         = "/bee_management.BeeManagementService/RegisterIncident"
	BeeManagementService_GetLatestSensorReading_FullMethodName   = "/bee_management.BeeManagementService/GetLatestSensorReading"
	BeeManagementService_CreateProductionReport_FullMethodName   = "/bee_management.BeeManagementService/CreateProductionReport"
)

// BeeManagementServiceClient is the client API for BeeManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service Definition
type BeeManagementServiceClient interface {
	// 1. Get Total Honey Harvested
	GetTotalHoneyHarvested(ctx context.Context, in *GetTotalHoneyHarvestedRequest, opts ...grpc.CallOption) (*GetTotalHoneyHarvestedResponse, error)
	// 2. Add Observation
	AddObservation(ctx context.Context, in *AddObservationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 3. Get Community Health Status
	GetCommunityHealthStatus(ctx context.Context, in *GetCommunityHealthStatusRequest, opts ...grpc.CallOption) (*GetCommunityHealthStatusResponse, error)
	// 4. Update Hive Status
	UpdateHiveStatus(ctx context.Context, in *UpdateHiveStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 5. Get Average Temperature
	GetAvgTemperature(ctx context.Context, in *GetAvgTemperatureRequest, opts ...grpc.CallOption) (*GetAvgTemperatureResponse, error)
	// 6. Assign Maintenance Plan
	AssignMaintenancePlan(ctx context.Context, in *AssignMaintenancePlanRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 7. Check Region Access
	HasRegionAccess(ctx context.Context, in *HasRegionAccessRequest, opts ...grpc.CallOption) (*HasRegionAccessResponse, error)
	// 8. Register Incident
	RegisterIncident(ctx context.Context, in *RegisterIncidentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 9. Get Latest Sensor Reading
	GetLatestSensorReading(ctx context.Context, in *GetLatestSensorReadingRequest, opts ...grpc.CallOption) (*GetLatestSensorReadingResponse, error)
	// 10. Create Production Report
	CreateProductionReport(ctx context.Context, in *CreateProductionReportRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type beeManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBeeManagementServiceClient(cc grpc.ClientConnInterface) BeeManagementServiceClient {
	return &beeManagementServiceClient{cc}
}

func (c *beeManagementServiceClient) GetTotalHoneyHarvested(ctx context.Context, in *GetTotalHoneyHarvestedRequest, opts ...grpc.CallOption) (*GetTotalHoneyHarvestedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTotalHoneyHarvestedResponse)
	err := c.cc.Invoke(ctx, BeeManagementService_GetTotalHoneyHarvested_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beeManagementServiceClient) AddObservation(ctx context.Context, in *AddObservationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BeeManagementService_AddObservation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beeManagementServiceClient) GetCommunityHealthStatus(ctx context.Context, in *GetCommunityHealthStatusRequest, opts ...grpc.CallOption) (*GetCommunityHealthStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCommunityHealthStatusResponse)
	err := c.cc.Invoke(ctx, BeeManagementService_GetCommunityHealthStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beeManagementServiceClient) UpdateHiveStatus(ctx context.Context, in *UpdateHiveStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BeeManagementService_UpdateHiveStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beeManagementServiceClient) GetAvgTemperature(ctx context.Context, in *GetAvgTemperatureRequest, opts ...grpc.CallOption) (*GetAvgTemperatureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAvgTemperatureResponse)
	err := c.cc.Invoke(ctx, BeeManagementService_GetAvgTemperature_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beeManagementServiceClient) AssignMaintenancePlan(ctx context.Context, in *AssignMaintenancePlanRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BeeManagementService_AssignMaintenancePlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beeManagementServiceClient) HasRegionAccess(ctx context.Context, in *HasRegionAccessRequest, opts ...grpc.CallOption) (*HasRegionAccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HasRegionAccessResponse)
	err := c.cc.Invoke(ctx, BeeManagementService_HasRegionAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beeManagementServiceClient) RegisterIncident(ctx context.Context, in *RegisterIncidentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BeeManagementService_RegisterIncident_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beeManagementServiceClient) GetLatestSensorReading(ctx context.Context, in *GetLatestSensorReadingRequest, opts ...grpc.CallOption) (*GetLatestSensorReadingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLatestSensorReadingResponse)
	err := c.cc.Invoke(ctx, BeeManagementService_GetLatestSensorReading_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beeManagementServiceClient) CreateProductionReport(ctx context.Context, in *CreateProductionReportRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BeeManagementService_CreateProductionReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BeeManagementServiceServer is the server API for BeeManagementService service.
// All implementations must embed UnimplementedBeeManagementServiceServer
// for forward compatibility.
//
// Service Definition
type BeeManagementServiceServer interface {
	// 1. Get Total Honey Harvested
	GetTotalHoneyHarvested(context.Context, *GetTotalHoneyHarvestedRequest) (*GetTotalHoneyHarvestedResponse, error)
	// 2. Add Observation
	AddObservation(context.Context, *AddObservationRequest) (*emptypb.Empty, error)
	// 3. Get Community Health Status
	GetCommunityHealthStatus(context.Context, *GetCommunityHealthStatusRequest) (*GetCommunityHealthStatusResponse, error)
	// 4. Update Hive Status
	UpdateHiveStatus(context.Context, *UpdateHiveStatusRequest) (*emptypb.Empty, error)
	// 5. Get Average Temperature
	GetAvgTemperature(context.Context, *GetAvgTemperatureRequest) (*GetAvgTemperatureResponse, error)
	// 6. Assign Maintenance Plan
	AssignMaintenancePlan(context.Context, *AssignMaintenancePlanRequest) (*emptypb.Empty, error)
	// 7. Check Region Access
	HasRegionAccess(context.Context, *HasRegionAccessRequest) (*HasRegionAccessResponse, error)
	// 8. Register Incident
	RegisterIncident(context.Context, *RegisterIncidentRequest) (*emptypb.Empty, error)
	// 9. Get Latest Sensor Reading
	GetLatestSensorReading(context.Context, *GetLatestSensorReadingRequest) (*GetLatestSensorReadingResponse, error)
	// 10. Create Production Report
	CreateProductionReport(context.Context, *CreateProductionReportRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedBeeManagementServiceServer()
}

// UnimplementedBeeManagementServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBeeManagementServiceServer struct{}

func (UnimplementedBeeManagementServiceServer) GetTotalHoneyHarvested(context.Context, *GetTotalHoneyHarvestedRequest) (*GetTotalHoneyHarvestedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalHoneyHarvested not implemented")
}
func (UnimplementedBeeManagementServiceServer) AddObservation(context.Context, *AddObservationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddObservation not implemented")
}
func (UnimplementedBeeManagementServiceServer) GetCommunityHealthStatus(context.Context, *GetCommunityHealthStatusRequest) (*GetCommunityHealthStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommunityHealthStatus not implemented")
}
func (UnimplementedBeeManagementServiceServer) UpdateHiveStatus(context.Context, *UpdateHiveStatusRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHiveStatus not implemented")
}
func (UnimplementedBeeManagementServiceServer) GetAvgTemperature(context.Context, *GetAvgTemperatureRequest) (*GetAvgTemperatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvgTemperature not implemented")
}
func (UnimplementedBeeManagementServiceServer) AssignMaintenancePlan(context.Context, *AssignMaintenancePlanRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignMaintenancePlan not implemented")
}
func (UnimplementedBeeManagementServiceServer) HasRegionAccess(context.Context, *HasRegionAccessRequest) (*HasRegionAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasRegionAccess not implemented")
}
func (UnimplementedBeeManagementServiceServer) RegisterIncident(context.Context, *RegisterIncidentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterIncident not implemented")
}
func (UnimplementedBeeManagementServiceServer) GetLatestSensorReading(context.Context, *GetLatestSensorReadingRequest) (*GetLatestSensorReadingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestSensorReading not implemented")
}
func (UnimplementedBeeManagementServiceServer) CreateProductionReport(context.Context, *CreateProductionReportRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProductionReport not implemented")
}
func (UnimplementedBeeManagementServiceServer) mustEmbedUnimplementedBeeManagementServiceServer() {}
func (UnimplementedBeeManagementServiceServer) testEmbeddedByValue()                              {}

// UnsafeBeeManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BeeManagementServiceServer will
// result in compilation errors.
type UnsafeBeeManagementServiceServer interface {
	mustEmbedUnimplementedBeeManagementServiceServer()
}

func RegisterBeeManagementServiceServer(s grpc.ServiceRegistrar, srv BeeManagementServiceServer) {
	// If the following call pancis, it indicates UnimplementedBeeManagementServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BeeManagementService_ServiceDesc, srv)
}

func _BeeManagementService_GetTotalHoneyHarvested_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTotalHoneyHarvestedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeeManagementServiceServer).GetTotalHoneyHarvested(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BeeManagementService_GetTotalHoneyHarvested_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeeManagementServiceServer).GetTotalHoneyHarvested(ctx, req.(*GetTotalHoneyHarvestedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeeManagementService_AddObservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddObservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeeManagementServiceServer).AddObservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BeeManagementService_AddObservation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeeManagementServiceServer).AddObservation(ctx, req.(*AddObservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeeManagementService_GetCommunityHealthStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommunityHealthStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeeManagementServiceServer).GetCommunityHealthStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BeeManagementService_GetCommunityHealthStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeeManagementServiceServer).GetCommunityHealthStatus(ctx, req.(*GetCommunityHealthStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeeManagementService_UpdateHiveStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHiveStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeeManagementServiceServer).UpdateHiveStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BeeManagementService_UpdateHiveStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeeManagementServiceServer).UpdateHiveStatus(ctx, req.(*UpdateHiveStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeeManagementService_GetAvgTemperature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvgTemperatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeeManagementServiceServer).GetAvgTemperature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BeeManagementService_GetAvgTemperature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeeManagementServiceServer).GetAvgTemperature(ctx, req.(*GetAvgTemperatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeeManagementService_AssignMaintenancePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignMaintenancePlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeeManagementServiceServer).AssignMaintenancePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BeeManagementService_AssignMaintenancePlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeeManagementServiceServer).AssignMaintenancePlan(ctx, req.(*AssignMaintenancePlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeeManagementService_HasRegionAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasRegionAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeeManagementServiceServer).HasRegionAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BeeManagementService_HasRegionAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeeManagementServiceServer).HasRegionAccess(ctx, req.(*HasRegionAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeeManagementService_RegisterIncident_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterIncidentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeeManagementServiceServer).RegisterIncident(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BeeManagementService_RegisterIncident_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeeManagementServiceServer).RegisterIncident(ctx, req.(*RegisterIncidentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeeManagementService_GetLatestSensorReading_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestSensorReadingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeeManagementServiceServer).GetLatestSensorReading(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BeeManagementService_GetLatestSensorReading_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeeManagementServiceServer).GetLatestSensorReading(ctx, req.(*GetLatestSensorReadingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeeManagementService_CreateProductionReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductionReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeeManagementServiceServer).CreateProductionReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BeeManagementService_CreateProductionReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeeManagementServiceServer).CreateProductionReport(ctx, req.(*CreateProductionReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BeeManagementService_ServiceDesc is the grpc.ServiceDesc for BeeManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BeeManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bee_management.BeeManagementService",
	HandlerType: (*BeeManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTotalHoneyHarvested",
			Handler:    _BeeManagementService_GetTotalHoneyHarvested_Handler,
		},
		{
			MethodName: "AddObservation",
			Handler:    _BeeManagementService_AddObservation_Handler,
		},
		{
			MethodName: "GetCommunityHealthStatus",
			Handler:    _BeeManagementService_GetCommunityHealthStatus_Handler,
		},
		{
			MethodName: "UpdateHiveStatus",
			Handler:    _BeeManagementService_UpdateHiveStatus_Handler,
		},
		{
			MethodName: "GetAvgTemperature",
			Handler:    _BeeManagementService_GetAvgTemperature_Handler,
		},
		{
			MethodName: "AssignMaintenancePlan",
			Handler:    _BeeManagementService_AssignMaintenancePlan_Handler,
		},
		{
			MethodName: "HasRegionAccess",
			Handler:    _BeeManagementService_HasRegionAccess_Handler,
		},
		{
			MethodName: "RegisterIncident",
			Handler:    _BeeManagementService_RegisterIncident_Handler,
		},
		{
			MethodName: "GetLatestSensorReading",
			Handler:    _BeeManagementService_GetLatestSensorReading_Handler,
		},
		{
			MethodName: "CreateProductionReport",
			Handler:    _BeeManagementService_CreateProductionReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bee_management.proto",
}

namespace: beesbiz-data
clusterScoped: false

tikvCluster:
  namespace: beesbiz-tikv
  name: tikv-cluster
  pd:
    baseImage: pingcap/pd
    maxFailoverCount: 3
    replicas: 3
    storageClassName: "standard"
    resources:
      requests:
        storage: "2Gi"
        cpu: "500m"
        memory: "1Gi"
      limits:
        cpu: "2"
        memory: "2Gi"

  tikv:
    baseImage: pingcap/tikv
    maxFailoverCount: 3
    replicas: 3
    storageClassName: "standard"
    resources:
      requests:
        storage: "2Gi"
        cpu: "500m"
        memory: "1Gi"
      limits:
        cpu: "2"
        memory: "2Gi"

cloudnativepg:
  namespace: beesbiz-data
  instances: 3
  imageName: ghcr.io/cloudnative-pg/postgresql:14.7
  imagePullPolicy: IfNotPresent
  resources:
    requests:
      cpu: "500m"
      memory: "1Gi"
    limits:
      cpu: "2"
      memory: "2Gi"
  storage:
    size: 2Gi
    storageClass: "standard"
  superuserSecret:
    name: postgresql-superuser
    namespace: beesbiz-data
  bootstrap:
    initdb:
      database: postgres
      owner: postgres
  monitoring:
    enablePodMonitor: true
    customQueriesConfigMap:
      - name: postgres-metrics-config
        key: queries.yaml
    customMetrics:
      - name: pg_database_size
        query: "SELECT pg_database_size(current_database()) as size"
        metrics:
          - size:
              usage: "GAUGE"
              description: "Database size in bytes"
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
      prometheusRule:
        enabled: true

rabbitmq:
  namespace: beesbiz-rabbitmq
  name: rabbitmq-cluster
  replicas: 1
  image: rabbitmq:4-management
  imagePullPolicy: IfNotPresent
  persistence:
    size: 2Gi
    storageClass: "standard"
  resources:
    requests:
      cpu: "500m"
      memory: "1Gi"
      ephemeralStorage: "2Gi"
    limits:
      cpu: "2"
      memory: "2Gi"
      ephemeralStorage: "2Gi"
  auth:
    username: "beesbiz"
    password: "beesbiz"
  plugins:
    - rabbitmq_prometheus
  extraConfig: |
    management.load_definitions = /etc/rabbitmq/definitions.json
    prometheus.return_per_object_metrics = true
  service:
    type: ClusterIP
    ports:
      - name: prometheus
        port: 15692
        targetPort: 15692
  containers:
    ports:
      - name: epmd
        containerPort: 4369
      - name: amqp
        containerPort: 5672
      - name: management
        containerPort: 15672
      - name: prometheus
        containerPort: 15692

monitoring:
  namespace: beesbiz-monitoring
  prometheus:
    replicas: 1
    retention: 15d
    resources:
      requests:
        cpu: "500m"
        memory: "1Gi"
      limits:
        cpu: "1"
        memory: "2Gi"
    storage:
      size: 10Gi
      storageClass: "standard"
  grafana:
    replicas: 1
    resources:
      requests:
        cpu: "200m"
        memory: "512Mi"
      limits:
        cpu: "500m"
        memory: "1Gi"
    adminPassword: "admin"
# Replace pod name with your actual grafana pod name from 'kubectl get pods -n beesbiz-monitoring'
#kubectl exec -it -n beesbiz-monitoring monitoring-grafana-7c7c4d899d-jpbzb -- grafana-cli admin reset-admin-password newpassword

#kubectl exec -it -n beesbiz-monitoring $(kubectl get pods -n beesbiz-monitoring| grep grafana | awk '{print $1}') -- grafana-cli admin reset-admin-password newpassword